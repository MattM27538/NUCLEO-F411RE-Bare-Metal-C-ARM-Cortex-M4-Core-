
GPIOInputOutput.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000240  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003d8  080003e0  000013e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003d8  080003d8  000013e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080003d8  080003d8  000013e0  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080003d8  080003e0  000013e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003d8  080003d8  000013d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003dc  080003dc  000013dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000013e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  080003e0  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080003e0  00002020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000013e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000004df  00000000  00000000  00001410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001ad  00000000  00000000  000018ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000088  00000000  00000000  00001aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000057  00000000  00000000  00001b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000dda9  00000000  00000000  00001b7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000c13  00000000  00000000  0000f928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004ffde  00000000  00000000  0001053b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00060519  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000130  00000000  00000000  0006055c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0006068c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080003c0 	.word	0x080003c0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	080003c0 	.word	0x080003c0

080001d8 <ledInit>:
#include <gpio.h>
#include <stdbool.h>
#include "stm32f4xx.h"

void ledInit(){
 80001d8:	b480      	push	{r7}
 80001da:	b085      	sub	sp, #20
 80001dc:	af00      	add	r7, sp, #0
	const uint32_t setBit0To1=(1U<<0);
 80001de:	2301      	movs	r3, #1
 80001e0:	60fb      	str	r3, [r7, #12]

	const uint32_t setBit10To1=(1U<<10);
 80001e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80001e6:	60bb      	str	r3, [r7, #8]

	const uint32_t setBit11To0=(1U<<11);
 80001e8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80001ec:	607b      	str	r3, [r7, #4]

	RCC->AHB1ENR |= setBit0To1;
 80001ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000220 <ledInit+0x48>)
 80001f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80001f2:	490b      	ldr	r1, [pc, #44]	@ (8000220 <ledInit+0x48>)
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	4313      	orrs	r3, r2
 80001f8:	630b      	str	r3, [r1, #48]	@ 0x30

	GPIOA->MODER |= setBit10To1;
 80001fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000224 <ledInit+0x4c>)
 80001fc:	681a      	ldr	r2, [r3, #0]
 80001fe:	4909      	ldr	r1, [pc, #36]	@ (8000224 <ledInit+0x4c>)
 8000200:	68bb      	ldr	r3, [r7, #8]
 8000202:	4313      	orrs	r3, r2
 8000204:	600b      	str	r3, [r1, #0]

	GPIOA->MODER &= ~(setBit11To0);
 8000206:	4b07      	ldr	r3, [pc, #28]	@ (8000224 <ledInit+0x4c>)
 8000208:	681a      	ldr	r2, [r3, #0]
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	43db      	mvns	r3, r3
 800020e:	4905      	ldr	r1, [pc, #20]	@ (8000224 <ledInit+0x4c>)
 8000210:	4013      	ands	r3, r2
 8000212:	600b      	str	r3, [r1, #0]
}
 8000214:	bf00      	nop
 8000216:	3714      	adds	r7, #20
 8000218:	46bd      	mov	sp, r7
 800021a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021e:	4770      	bx	lr
 8000220:	40023800 	.word	0x40023800
 8000224:	40020000 	.word	0x40020000

08000228 <ledOn>:

void ledOn(){
 8000228:	b480      	push	{r7}
 800022a:	b083      	sub	sp, #12
 800022c:	af00      	add	r7, sp, #0
	const uint32_t setBit5To1=(1U<<5);
 800022e:	2320      	movs	r3, #32
 8000230:	607b      	str	r3, [r7, #4]

	GPIOA->BSRR |= setBit5To1;
 8000232:	4b06      	ldr	r3, [pc, #24]	@ (800024c <ledOn+0x24>)
 8000234:	699a      	ldr	r2, [r3, #24]
 8000236:	4905      	ldr	r1, [pc, #20]	@ (800024c <ledOn+0x24>)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	4313      	orrs	r3, r2
 800023c:	618b      	str	r3, [r1, #24]
}
 800023e:	bf00      	nop
 8000240:	370c      	adds	r7, #12
 8000242:	46bd      	mov	sp, r7
 8000244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000248:	4770      	bx	lr
 800024a:	bf00      	nop
 800024c:	40020000 	.word	0x40020000

08000250 <ledOff>:

void ledOff(){
 8000250:	b480      	push	{r7}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
	const uint32_t setBit21To1=(1U<<21);
 8000256:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800025a:	607b      	str	r3, [r7, #4]

	GPIOA->BSRR |= setBit21To1;
 800025c:	4b05      	ldr	r3, [pc, #20]	@ (8000274 <ledOff+0x24>)
 800025e:	699a      	ldr	r2, [r3, #24]
 8000260:	4904      	ldr	r1, [pc, #16]	@ (8000274 <ledOff+0x24>)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	4313      	orrs	r3, r2
 8000266:	618b      	str	r3, [r1, #24]
}
 8000268:	bf00      	nop
 800026a:	370c      	adds	r7, #12
 800026c:	46bd      	mov	sp, r7
 800026e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000272:	4770      	bx	lr
 8000274:	40020000 	.word	0x40020000

08000278 <buttonInit>:

void buttonInit(){
 8000278:	b480      	push	{r7}
 800027a:	b083      	sub	sp, #12
 800027c:	af00      	add	r7, sp, #0
	const uint32_t enableGPIOC=(1U<<2);
 800027e:	2304      	movs	r3, #4
 8000280:	607b      	str	r3, [r7, #4]


	RCC->AHB1ENR |= enableGPIOC;
 8000282:	4b0c      	ldr	r3, [pc, #48]	@ (80002b4 <buttonInit+0x3c>)
 8000284:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000286:	490b      	ldr	r1, [pc, #44]	@ (80002b4 <buttonInit+0x3c>)
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	4313      	orrs	r3, r2
 800028c:	630b      	str	r3, [r1, #48]	@ 0x30

	GPIOC->MODER &= ~(1U<<26);
 800028e:	4b0a      	ldr	r3, [pc, #40]	@ (80002b8 <buttonInit+0x40>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	4a09      	ldr	r2, [pc, #36]	@ (80002b8 <buttonInit+0x40>)
 8000294:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8000298:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &= ~(1U<<27);
 800029a:	4b07      	ldr	r3, [pc, #28]	@ (80002b8 <buttonInit+0x40>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	4a06      	ldr	r2, [pc, #24]	@ (80002b8 <buttonInit+0x40>)
 80002a0:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 80002a4:	6013      	str	r3, [r2, #0]
}
 80002a6:	bf00      	nop
 80002a8:	370c      	adds	r7, #12
 80002aa:	46bd      	mov	sp, r7
 80002ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	40023800 	.word	0x40023800
 80002b8:	40020800 	.word	0x40020800

080002bc <getButtonState>:

bool getButtonState(){
 80002bc:	b480      	push	{r7}
 80002be:	b083      	sub	sp, #12
 80002c0:	af00      	add	r7, sp, #0
	const uint32_t buttonPin=(1U<<13);
 80002c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80002c6:	607b      	str	r3, [r7, #4]

	bool buttonBeingPushed=false;
 80002c8:	2300      	movs	r3, #0
 80002ca:	70fb      	strb	r3, [r7, #3]
	bool buttonNotBeingPushed=true;
 80002cc:	2301      	movs	r3, #1
 80002ce:	70bb      	strb	r3, [r7, #2]

	if(GPIOC->IDR & buttonPin){
 80002d0:	4b07      	ldr	r3, [pc, #28]	@ (80002f0 <getButtonState+0x34>)
 80002d2:	691a      	ldr	r2, [r3, #16]
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	4013      	ands	r3, r2
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d001      	beq.n	80002e0 <getButtonState+0x24>
		return buttonBeingPushed;
 80002dc:	78fb      	ldrb	r3, [r7, #3]
 80002de:	e000      	b.n	80002e2 <getButtonState+0x26>
	}

	return buttonNotBeingPushed;
 80002e0:	78bb      	ldrb	r3, [r7, #2]
}
 80002e2:	4618      	mov	r0, r3
 80002e4:	370c      	adds	r7, #12
 80002e6:	46bd      	mov	sp, r7
 80002e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	40020800 	.word	0x40020800

080002f4 <main>:
#include "stm32f4xx.h"

bool buttonBeingPushed;

int main()
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
	ledInit();
 80002f8:	f7ff ff6e 	bl	80001d8 <ledInit>

	buttonInit();
 80002fc:	f7ff ffbc 	bl	8000278 <buttonInit>
//
//		}
//	}

	while(true){
		buttonBeingPushed=getButtonState();
 8000300:	f7ff ffdc 	bl	80002bc <getButtonState>
 8000304:	4603      	mov	r3, r0
 8000306:	461a      	mov	r2, r3
 8000308:	4b05      	ldr	r3, [pc, #20]	@ (8000320 <main+0x2c>)
 800030a:	701a      	strb	r2, [r3, #0]

		if(buttonBeingPushed){
 800030c:	4b04      	ldr	r3, [pc, #16]	@ (8000320 <main+0x2c>)
 800030e:	781b      	ldrb	r3, [r3, #0]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d002      	beq.n	800031a <main+0x26>
			ledOn();
 8000314:	f7ff ff88 	bl	8000228 <ledOn>
 8000318:	e7f2      	b.n	8000300 <main+0xc>
		}
		else{
			ledOff();
 800031a:	f7ff ff99 	bl	8000250 <ledOff>
		buttonBeingPushed=getButtonState();
 800031e:	e7ef      	b.n	8000300 <main+0xc>
 8000320:	2000001c 	.word	0x2000001c

08000324 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000324:	480d      	ldr	r0, [pc, #52]	@ (800035c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000326:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000328:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800032c:	480c      	ldr	r0, [pc, #48]	@ (8000360 <LoopForever+0x6>)
  ldr r1, =_edata
 800032e:	490d      	ldr	r1, [pc, #52]	@ (8000364 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000330:	4a0d      	ldr	r2, [pc, #52]	@ (8000368 <LoopForever+0xe>)
  movs r3, #0
 8000332:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000334:	e002      	b.n	800033c <LoopCopyDataInit>

08000336 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000336:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000338:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800033a:	3304      	adds	r3, #4

0800033c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800033c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800033e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000340:	d3f9      	bcc.n	8000336 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000342:	4a0a      	ldr	r2, [pc, #40]	@ (800036c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000344:	4c0a      	ldr	r4, [pc, #40]	@ (8000370 <LoopForever+0x16>)
  movs r3, #0
 8000346:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000348:	e001      	b.n	800034e <LoopFillZerobss>

0800034a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800034a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800034c:	3204      	adds	r2, #4

0800034e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800034e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000350:	d3fb      	bcc.n	800034a <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000352:	f000 f811 	bl	8000378 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000356:	f7ff ffcd 	bl	80002f4 <main>

0800035a <LoopForever>:

LoopForever:
  b LoopForever
 800035a:	e7fe      	b.n	800035a <LoopForever>
  ldr   r0, =_estack
 800035c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000360:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000364:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000368:	080003e0 	.word	0x080003e0
  ldr r2, =_sbss
 800036c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000370:	20000020 	.word	0x20000020

08000374 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000374:	e7fe      	b.n	8000374 <ADC_IRQHandler>
	...

08000378 <__libc_init_array>:
 8000378:	b570      	push	{r4, r5, r6, lr}
 800037a:	4d0d      	ldr	r5, [pc, #52]	@ (80003b0 <__libc_init_array+0x38>)
 800037c:	4c0d      	ldr	r4, [pc, #52]	@ (80003b4 <__libc_init_array+0x3c>)
 800037e:	1b64      	subs	r4, r4, r5
 8000380:	10a4      	asrs	r4, r4, #2
 8000382:	2600      	movs	r6, #0
 8000384:	42a6      	cmp	r6, r4
 8000386:	d109      	bne.n	800039c <__libc_init_array+0x24>
 8000388:	4d0b      	ldr	r5, [pc, #44]	@ (80003b8 <__libc_init_array+0x40>)
 800038a:	4c0c      	ldr	r4, [pc, #48]	@ (80003bc <__libc_init_array+0x44>)
 800038c:	f000 f818 	bl	80003c0 <_init>
 8000390:	1b64      	subs	r4, r4, r5
 8000392:	10a4      	asrs	r4, r4, #2
 8000394:	2600      	movs	r6, #0
 8000396:	42a6      	cmp	r6, r4
 8000398:	d105      	bne.n	80003a6 <__libc_init_array+0x2e>
 800039a:	bd70      	pop	{r4, r5, r6, pc}
 800039c:	f855 3b04 	ldr.w	r3, [r5], #4
 80003a0:	4798      	blx	r3
 80003a2:	3601      	adds	r6, #1
 80003a4:	e7ee      	b.n	8000384 <__libc_init_array+0xc>
 80003a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80003aa:	4798      	blx	r3
 80003ac:	3601      	adds	r6, #1
 80003ae:	e7f2      	b.n	8000396 <__libc_init_array+0x1e>
 80003b0:	080003d8 	.word	0x080003d8
 80003b4:	080003d8 	.word	0x080003d8
 80003b8:	080003d8 	.word	0x080003d8
 80003bc:	080003dc 	.word	0x080003dc

080003c0 <_init>:
 80003c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003c2:	bf00      	nop
 80003c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003c6:	bc08      	pop	{r3}
 80003c8:	469e      	mov	lr, r3
 80003ca:	4770      	bx	lr

080003cc <_fini>:
 80003cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ce:	bf00      	nop
 80003d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003d2:	bc08      	pop	{r3}
 80003d4:	469e      	mov	lr, r3
 80003d6:	4770      	bx	lr
