
GeneralTimerDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002ec  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000484  0800048c  0000148c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000484  08000484  0000148c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000484  08000484  0000148c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000484  0800048c  0000148c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000484  08000484  00001484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000488  08000488  00001488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  0000148c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800048c  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800048c  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000148c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000903  00000000  00000000  000014bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000311  00000000  00000000  00001dbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000e0  00000000  00000000  000020d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000094  00000000  00000000  000021b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000de8b  00000000  00000000  00002244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001254  00000000  00000000  000100cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00050128  00000000  00000000  00011323  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0006144b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000264  00000000  00000000  00061490  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000616f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800046c 	.word	0x0800046c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	0800046c 	.word	0x0800046c

080001d8 <enableGPIOforAHB1>:
#include <gpio.h>
#include <stdbool.h>
#include <stdint.h>
#include "stm32f4xx.h"

void enableGPIOforAHB1(const uint32_t enableGPIO){
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
	RCC->AHB1ENR |= enableGPIO;
 80001e0:	4b05      	ldr	r3, [pc, #20]	@ (80001f8 <enableGPIOforAHB1+0x20>)
 80001e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80001e4:	4904      	ldr	r1, [pc, #16]	@ (80001f8 <enableGPIOforAHB1+0x20>)
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	4313      	orrs	r3, r2
 80001ea:	630b      	str	r3, [r1, #48]	@ 0x30
}
 80001ec:	bf00      	nop
 80001ee:	370c      	adds	r7, #12
 80001f0:	46bd      	mov	sp, r7
 80001f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f6:	4770      	bx	lr
 80001f8:	40023800 	.word	0x40023800

080001fc <setGPIOAModeToOutput>:

void setGPIOAModeToOutput(const uint32_t setBit, const uint32_t setBit2){
 80001fc:	b480      	push	{r7}
 80001fe:	b083      	sub	sp, #12
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]
 8000204:	6039      	str	r1, [r7, #0]
	GPIOA->MODER |= setBit;
 8000206:	4b09      	ldr	r3, [pc, #36]	@ (800022c <setGPIOAModeToOutput+0x30>)
 8000208:	681a      	ldr	r2, [r3, #0]
 800020a:	4908      	ldr	r1, [pc, #32]	@ (800022c <setGPIOAModeToOutput+0x30>)
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	4313      	orrs	r3, r2
 8000210:	600b      	str	r3, [r1, #0]

	GPIOA->MODER &= setBit2;
 8000212:	4b06      	ldr	r3, [pc, #24]	@ (800022c <setGPIOAModeToOutput+0x30>)
 8000214:	681a      	ldr	r2, [r3, #0]
 8000216:	4905      	ldr	r1, [pc, #20]	@ (800022c <setGPIOAModeToOutput+0x30>)
 8000218:	683b      	ldr	r3, [r7, #0]
 800021a:	4013      	ands	r3, r2
 800021c:	600b      	str	r3, [r1, #0]
}
 800021e:	bf00      	nop
 8000220:	370c      	adds	r7, #12
 8000222:	46bd      	mov	sp, r7
 8000224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	40020000 	.word	0x40020000

08000230 <PA5LedInit>:

void PA5LedInit(){
 8000230:	b580      	push	{r7, lr}
 8000232:	b084      	sub	sp, #16
 8000234:	af00      	add	r7, sp, #0
	const uint32_t enableGPIOA = (1U<<0);
 8000236:	2301      	movs	r3, #1
 8000238:	60fb      	str	r3, [r7, #12]

	const uint32_t setBit10To1 = (1U<<10);
 800023a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800023e:	60bb      	str	r3, [r7, #8]

	const uint32_t setBit11To0 = ~(1U<<11);
 8000240:	f46f 6300 	mvn.w	r3, #2048	@ 0x800
 8000244:	607b      	str	r3, [r7, #4]

	enableGPIOforAHB1(enableGPIOA);
 8000246:	68f8      	ldr	r0, [r7, #12]
 8000248:	f7ff ffc6 	bl	80001d8 <enableGPIOforAHB1>

	setGPIOAModeToOutput(setBit10To1, setBit11To0);
 800024c:	6879      	ldr	r1, [r7, #4]
 800024e:	68b8      	ldr	r0, [r7, #8]
 8000250:	f7ff ffd4 	bl	80001fc <setGPIOAModeToOutput>
}
 8000254:	bf00      	nop
 8000256:	3710      	adds	r7, #16
 8000258:	46bd      	mov	sp, r7
 800025a:	bd80      	pop	{r7, pc}

0800025c <PA5LedToggle>:

void PA5LedToggle(){
 800025c:	b480      	push	{r7}
 800025e:	b083      	sub	sp, #12
 8000260:	af00      	add	r7, sp, #0
	const uint32_t togglePinOnOff=(1U<<5);
 8000262:	2320      	movs	r3, #32
 8000264:	607b      	str	r3, [r7, #4]

	GPIOA->ODR ^= togglePinOnOff;
 8000266:	4b06      	ldr	r3, [pc, #24]	@ (8000280 <PA5LedToggle+0x24>)
 8000268:	695a      	ldr	r2, [r3, #20]
 800026a:	4905      	ldr	r1, [pc, #20]	@ (8000280 <PA5LedToggle+0x24>)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	4053      	eors	r3, r2
 8000270:	614b      	str	r3, [r1, #20]
}
 8000272:	bf00      	nop
 8000274:	370c      	adds	r7, #12
 8000276:	46bd      	mov	sp, r7
 8000278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop
 8000280:	40020000 	.word	0x40020000

08000284 <main>:
 ******************************************************************************
 */
#include "oneSecondTimer.h"

int main()
{
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0
	blinkPA5LED();
 8000288:	f000 f803 	bl	8000292 <blinkPA5LED>
 800028c:	2300      	movs	r3, #0
}
 800028e:	4618      	mov	r0, r3
 8000290:	bd80      	pop	{r7, pc}

08000292 <blinkPA5LED>:
#include "oneSecondTimer.h"
#include "gpio.h"
#include <stdint.h>
#include <stdbool.h>

void blinkPA5LED(){
 8000292:	b580      	push	{r7, lr}
 8000294:	af00      	add	r7, sp, #0
	PA5LedInit();
 8000296:	f7ff ffcb 	bl	8000230 <PA5LedInit>

	OneSecondTimer2Init();
 800029a:	f000 f830 	bl	80002fe <OneSecondTimer2Init>

	while(true){

		PA5LedToggle();
 800029e:	f7ff ffdd 	bl	800025c <PA5LedToggle>

		delay();
 80002a2:	f000 f804 	bl	80002ae <delay>

		resetTimer2StatusRegister();
 80002a6:	f000 f816 	bl	80002d6 <resetTimer2StatusRegister>
		PA5LedToggle();
 80002aa:	bf00      	nop
 80002ac:	e7f7      	b.n	800029e <blinkPA5LED+0xc>

080002ae <delay>:
	}
}

void delay(){
 80002ae:	b480      	push	{r7}
 80002b0:	b083      	sub	sp, #12
 80002b2:	af00      	add	r7, sp, #0
	const uint32_t setStatusUpdateInterruptFlag = (1U<<0);
 80002b4:	2301      	movs	r3, #1
 80002b6:	607b      	str	r3, [r7, #4]

	while(!(TIM2->SR & setStatusUpdateInterruptFlag)){
 80002b8:	bf00      	nop
 80002ba:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002be:	691a      	ldr	r2, [r3, #16]
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	4013      	ands	r3, r2
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d0f8      	beq.n	80002ba <delay+0xc>

	};
}
 80002c8:	bf00      	nop
 80002ca:	bf00      	nop
 80002cc:	370c      	adds	r7, #12
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr

080002d6 <resetTimer2StatusRegister>:

void resetTimer2StatusRegister(){
 80002d6:	b480      	push	{r7}
 80002d8:	b083      	sub	sp, #12
 80002da:	af00      	add	r7, sp, #0
	const uint32_t setStatusUpdateInterruptFlag = (1U<<0);
 80002dc:	2301      	movs	r3, #1
 80002de:	607b      	str	r3, [r7, #4]

	TIM2->SR &= ~setStatusUpdateInterruptFlag;
 80002e0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002e4:	691a      	ldr	r2, [r3, #16]
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	43db      	mvns	r3, r3
 80002ea:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80002ee:	4013      	ands	r3, r2
 80002f0:	610b      	str	r3, [r1, #16]
}
 80002f2:	bf00      	nop
 80002f4:	370c      	adds	r7, #12
 80002f6:	46bd      	mov	sp, r7
 80002f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fc:	4770      	bx	lr

080002fe <OneSecondTimer2Init>:

void OneSecondTimer2Init(void){
 80002fe:	b580      	push	{r7, lr}
 8000300:	b082      	sub	sp, #8
 8000302:	af00      	add	r7, sp, #0
	enableTimer2();
 8000304:	f000 f816 	bl	8000334 <enableTimer2>

	uint16_t prescalerValue = 1600;
 8000308:	f44f 63c8 	mov.w	r3, #1600	@ 0x640
 800030c:	80fb      	strh	r3, [r7, #6]

	setTimer2PrescalerValue(prescalerValue);
 800030e:	88fb      	ldrh	r3, [r7, #6]
 8000310:	4618      	mov	r0, r3
 8000312:	f000 f823 	bl	800035c <setTimer2PrescalerValue>

	uint32_t autoReloadValue = 10000;
 8000316:	f242 7310 	movw	r3, #10000	@ 0x2710
 800031a:	603b      	str	r3, [r7, #0]

	setTimer2AutoReloadValue(autoReloadValue);
 800031c:	6838      	ldr	r0, [r7, #0]
 800031e:	f000 f82d 	bl	800037c <setTimer2AutoReloadValue>

	enableTimer2Counter();
 8000322:	f000 f83a 	bl	800039a <enableTimer2Counter>

	resetTimer2Counter();
 8000326:	f000 f847 	bl	80003b8 <resetTimer2Counter>
}
 800032a:	bf00      	nop
 800032c:	3708      	adds	r7, #8
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}
	...

08000334 <enableTimer2>:

void enableTimer2(){
 8000334:	b480      	push	{r7}
 8000336:	b083      	sub	sp, #12
 8000338:	af00      	add	r7, sp, #0
	const uint32_t TIM2EN = (1U<<0);
 800033a:	2301      	movs	r3, #1
 800033c:	607b      	str	r3, [r7, #4]

	RCC->APB1ENR |= TIM2EN;
 800033e:	4b06      	ldr	r3, [pc, #24]	@ (8000358 <enableTimer2+0x24>)
 8000340:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000342:	4905      	ldr	r1, [pc, #20]	@ (8000358 <enableTimer2+0x24>)
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	4313      	orrs	r3, r2
 8000348:	640b      	str	r3, [r1, #64]	@ 0x40
}
 800034a:	bf00      	nop
 800034c:	370c      	adds	r7, #12
 800034e:	46bd      	mov	sp, r7
 8000350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000354:	4770      	bx	lr
 8000356:	bf00      	nop
 8000358:	40023800 	.word	0x40023800

0800035c <setTimer2PrescalerValue>:

void setTimer2PrescalerValue(uint16_t prescalerValue){
 800035c:	b480      	push	{r7}
 800035e:	b083      	sub	sp, #12
 8000360:	af00      	add	r7, sp, #0
 8000362:	4603      	mov	r3, r0
 8000364:	80fb      	strh	r3, [r7, #6]
	TIM2->PSC = prescalerValue - 1;
 8000366:	88fb      	ldrh	r3, [r7, #6]
 8000368:	1e5a      	subs	r2, r3, #1
 800036a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800036e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000370:	bf00      	nop
 8000372:	370c      	adds	r7, #12
 8000374:	46bd      	mov	sp, r7
 8000376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037a:	4770      	bx	lr

0800037c <setTimer2AutoReloadValue>:

void setTimer2AutoReloadValue(uint32_t autoReloadValue){
 800037c:	b480      	push	{r7}
 800037e:	b083      	sub	sp, #12
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
	TIM2->ARR = 10000-1;
 8000384:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000388:	f242 720f 	movw	r2, #9999	@ 0x270f
 800038c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800038e:	bf00      	nop
 8000390:	370c      	adds	r7, #12
 8000392:	46bd      	mov	sp, r7
 8000394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000398:	4770      	bx	lr

0800039a <enableTimer2Counter>:

void enableTimer2Counter(){
 800039a:	b480      	push	{r7}
 800039c:	b083      	sub	sp, #12
 800039e:	af00      	add	r7, sp, #0
	const uint32_t CR1_CEN = (1U<<0);
 80003a0:	2301      	movs	r3, #1
 80003a2:	607b      	str	r3, [r7, #4]

	TIM2->CR1 = CR1_CEN;
 80003a4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	6013      	str	r3, [r2, #0]
}
 80003ac:	bf00      	nop
 80003ae:	370c      	adds	r7, #12
 80003b0:	46bd      	mov	sp, r7
 80003b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b6:	4770      	bx	lr

080003b8 <resetTimer2Counter>:

void resetTimer2Counter(){
 80003b8:	b480      	push	{r7}
 80003ba:	af00      	add	r7, sp, #0
	TIM2->CNT = 0;
 80003bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003c0:	2200      	movs	r2, #0
 80003c2:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80003c4:	bf00      	nop
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr
	...

080003d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003d0:	480d      	ldr	r0, [pc, #52]	@ (8000408 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003d2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003d4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003d8:	480c      	ldr	r0, [pc, #48]	@ (800040c <LoopForever+0x6>)
  ldr r1, =_edata
 80003da:	490d      	ldr	r1, [pc, #52]	@ (8000410 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003dc:	4a0d      	ldr	r2, [pc, #52]	@ (8000414 <LoopForever+0xe>)
  movs r3, #0
 80003de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003e0:	e002      	b.n	80003e8 <LoopCopyDataInit>

080003e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003e6:	3304      	adds	r3, #4

080003e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003ec:	d3f9      	bcc.n	80003e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000418 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003f0:	4c0a      	ldr	r4, [pc, #40]	@ (800041c <LoopForever+0x16>)
  movs r3, #0
 80003f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003f4:	e001      	b.n	80003fa <LoopFillZerobss>

080003f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003f8:	3204      	adds	r2, #4

080003fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003fc:	d3fb      	bcc.n	80003f6 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80003fe:	f000 f811 	bl	8000424 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000402:	f7ff ff3f 	bl	8000284 <main>

08000406 <LoopForever>:

LoopForever:
  b LoopForever
 8000406:	e7fe      	b.n	8000406 <LoopForever>
  ldr   r0, =_estack
 8000408:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800040c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000410:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000414:	0800048c 	.word	0x0800048c
  ldr r2, =_sbss
 8000418:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800041c:	2000001c 	.word	0x2000001c

08000420 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000420:	e7fe      	b.n	8000420 <ADC_IRQHandler>
	...

08000424 <__libc_init_array>:
 8000424:	b570      	push	{r4, r5, r6, lr}
 8000426:	4d0d      	ldr	r5, [pc, #52]	@ (800045c <__libc_init_array+0x38>)
 8000428:	4c0d      	ldr	r4, [pc, #52]	@ (8000460 <__libc_init_array+0x3c>)
 800042a:	1b64      	subs	r4, r4, r5
 800042c:	10a4      	asrs	r4, r4, #2
 800042e:	2600      	movs	r6, #0
 8000430:	42a6      	cmp	r6, r4
 8000432:	d109      	bne.n	8000448 <__libc_init_array+0x24>
 8000434:	4d0b      	ldr	r5, [pc, #44]	@ (8000464 <__libc_init_array+0x40>)
 8000436:	4c0c      	ldr	r4, [pc, #48]	@ (8000468 <__libc_init_array+0x44>)
 8000438:	f000 f818 	bl	800046c <_init>
 800043c:	1b64      	subs	r4, r4, r5
 800043e:	10a4      	asrs	r4, r4, #2
 8000440:	2600      	movs	r6, #0
 8000442:	42a6      	cmp	r6, r4
 8000444:	d105      	bne.n	8000452 <__libc_init_array+0x2e>
 8000446:	bd70      	pop	{r4, r5, r6, pc}
 8000448:	f855 3b04 	ldr.w	r3, [r5], #4
 800044c:	4798      	blx	r3
 800044e:	3601      	adds	r6, #1
 8000450:	e7ee      	b.n	8000430 <__libc_init_array+0xc>
 8000452:	f855 3b04 	ldr.w	r3, [r5], #4
 8000456:	4798      	blx	r3
 8000458:	3601      	adds	r6, #1
 800045a:	e7f2      	b.n	8000442 <__libc_init_array+0x1e>
 800045c:	08000484 	.word	0x08000484
 8000460:	08000484 	.word	0x08000484
 8000464:	08000484 	.word	0x08000484
 8000468:	08000488 	.word	0x08000488

0800046c <_init>:
 800046c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800046e:	bf00      	nop
 8000470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000472:	bc08      	pop	{r3}
 8000474:	469e      	mov	lr, r3
 8000476:	4770      	bx	lr

08000478 <_fini>:
 8000478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800047a:	bf00      	nop
 800047c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800047e:	bc08      	pop	{r3}
 8000480:	469e      	mov	lr, r3
 8000482:	4770      	bx	lr
